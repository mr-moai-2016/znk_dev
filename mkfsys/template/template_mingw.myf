@def_quote [' ']

@@V config
obj_sfx  = ['o']
exe_sfx  = ['exe']
slib_pfx = ['lib']
ilib_pfx = ['lib']
dlib_pfx = ['']
slib_sfx = ['a']
ilib_sfx = ['dll.a']
dlib_sfx = ['dll']
template_include_path = ['-I$(MY_LIBS_ROOT)/$[lib_dir]$ \']
template_lib_ver_sfx  = ['-$[lib_dlver]$']
template_lib_file     = ['$[lib_pfx]$$[lib_name]$$[lib_ver_sfx]$.$[lib_sfx]$']
template_libs_path    = ['$(MY_LIBS_ROOT)/$[lib_dir]$/out_dir/$(ABINAME)/$[lib_file]$']
template_runtime_path = ['$(MY_LIBS_ROOT)/$(DLIBS_DIR)/$[lib_file]$']
template_sublib_dir   = ['$[submkf_dir]$/$O']
shell = ['dos']
@@.

@@L mkdir_rule
$[obj_dir]$:
	if not exist $[obj_dir]$ mkdir $[obj_dir]$
@@.

@@L exefile_rule
$[exe_file]$: $[objs]$ $[res_file]$
	@echo $(LINKER) -o $[exe_file]$ $[res_file]$ {[objs]} $(SUB_LIBS) $[dep_libs]$
	@     $(LINKER) -o $[exe_file]$ $[res_file]$ $[objs]$ $(SUB_LIBS) $[dep_libs]$
@@.

@@L dlibfile_rule
$[dlib_file]$: $[objs]$ $[slib_file]$ gsl.def
	@echo gcc -static-libgcc -g -Wl,--disable-stdcall-fixup,--kill-at -shared -o $[dlib_file]$ {[objs]} $(SUB_LIBS) $[dep_libs]$ $[def_file]$
	@     gcc -static-libgcc -g -Wl,--disable-stdcall-fixup,--kill-at -shared -o $[dlib_file]$ $[objs]$ $(SUB_LIBS) $[dep_libs]$ $[def_file]$
	dlltool --kill-at --dllname $[dlib_file]$ -d $[def_file]$ -l $[ilib_file]$
@@.

@@L slibfile_rule
$[slib_file]$: $[objs]$
	if exist $[slib_file]$ del $[slib_file]$
	@echo ar cru $[slib_file]$ {[objs]} $(SUB_OBJS_ECHO)
	@     ar cru $[slib_file]$ $[objs]$ $(SUB_OBJS)
	ranlib $[slib_file]$
@@.

@@L gsl_rule
gsl.myf: $[slib_file]$
	@if exist $[gslconv]$ $[gslconv]$ -g gsl.myf $[slib_file]$ $(MACHINE)

gsl.def: gsl.myf
	@if exist $[gslconv]$ $[gslconv]$ -d gsl.myf gsl.def
@@.

@@L suffix_rule
$[obj_dir]$\\%.o: $[src_dir]$\%.$[src_sfx]$
	$(COMPILER) -I$S $(INCLUDE_FLAG) -o $@ -c $<
@@.

@@L rc_rule
$[res_file]$: $[rc_file]$
	windres --input-format=rc --output-format=coff -o$[res_file]$ $[rc_file]$
@@.

@@L submkf_rule
.PHONY : submkf_$[submkf_dir]$
submkf_$[submkf_dir]$:
	@echo ======
	@echo === Entering [$[submkf_dir]$] ===
	mingw32-make -f Makefile_$[mkf_id]$.mak -C $[submkf_dir]$
	@echo === Leaving [$[submkf_dir]$] ===
	@echo ======
@@.

@@L install_rule
install:
	@echo _
	@echo === Install all product files ===
	if not exist $[install_dir]$ mkdir $[install_dir]$
	@for %%a in ( $(PRODUCT_FILES) ) do @if exist "%%a" @$(CP) /F "%%a" $[install_dir]$\ $(CP_END)
@@.

@@L clean_here_rule
	rmdir /S /Q $O\ 
@@.

@@L clean_sub_rule
	@echo === Entering [$[submkf_dir]$] ===
	mingw32-make -f Makefile_$[mkf_id]$.mak clean -C $[submkf_dir]$
	@echo === Leaving [$[submkf_dir]$] ===
@@.
